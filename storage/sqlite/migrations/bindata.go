// Code generated by go-bindata. DO NOT EDIT.
// sources:
// 01_init_database.down.sql
// 01_init_database.up.sql
package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __01_init_databaseDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\xf0\x74\x53\x70\x8d\xf0\x0c\x0e\x09\x56\x48\x2e\x2d\x2a\x4e\x8d\x4f\x4c\x49\xc9\xcf\xb3\xe6\xc2\xa3\xa2\x28\x35\x27\x35\xb1\x38\xd5\x9a\x0b\x10\x00\x00\xff\xff\xd7\xd0\xf8\xf1\x46\x00\x00\x00")

func _01_init_databaseDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__01_init_databaseDownSql,
		"01_init_database.down.sql",
	)
}

func _01_init_databaseDownSql() (*asset, error) {
	bytes, err := _01_init_databaseDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "01_init_database.down.sql", size: 70, mode: os.FileMode(420), modTime: time.Unix(1529317648, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __01_init_databaseUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x90\xcd\x4e\xc3\x30\x10\x84\xef\x7e\x8a\x3d\x26\x12\x6f\xc0\x29\x54\x9b\xca\x02\x52\xe4\xf8\xd0\x9e\xac\x55\xbc\xa0\x48\xfe\x91\xec\x1a\xc4\xdb\x23\x17\x1a\x9a\x5e\x72\xf3\xcc\xc8\x9e\xf9\x2c\x76\x0a\x3b\x8d\xa0\xbb\xa7\x17\x04\xd9\xc3\x70\xd0\x80\x47\x39\xea\x11\xa6\x92\x32\x1b\xb2\x36\x06\x68\x04\xc0\x6c\x41\x0e\x1a\xf7\xa8\xe0\x4d\xc9\xd7\x4e\x9d\xe0\x19\x4f\x0f\x02\x20\x90\x67\xd0\x78\xd4\x55\x94\xe4\x96\x73\x2e\xde\x53\xfa\x5e\xb4\x8d\x5f\xc1\x45\xb2\x53\x2c\xe1\x7c\x7d\xad\x06\x97\x96\xff\x82\x6a\xf5\x07\x85\x72\x3f\xd4\x8e\xe6\x2f\x6e\x41\x61\x8f\x0a\x87\x1d\x8e\xbf\x57\x9a\xd9\xb6\xa2\x7d\x14\x62\x1b\x24\xb1\x63\xca\xbc\x81\xf2\x3e\x3b\x5e\xe1\x4c\x89\xe9\xcc\xd6\xd0\x6a\xef\x2d\xe4\x07\x79\x36\x9f\x9c\xf2\x1c\xc3\x62\x5e\xd6\x99\x0d\x22\x73\x87\x74\xf3\xe3\x57\xb0\x9f\x00\x00\x00\xff\xff\x91\x64\x19\x96\xa1\x01\x00\x00")

func _01_init_databaseUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__01_init_databaseUpSql,
		"01_init_database.up.sql",
	)
}

func _01_init_databaseUpSql() (*asset, error) {
	bytes, err := _01_init_databaseUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "01_init_database.up.sql", size: 417, mode: os.FileMode(420), modTime: time.Unix(1529341907, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"01_init_database.down.sql": _01_init_databaseDownSql,
	"01_init_database.up.sql": _01_init_databaseUpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"01_init_database.down.sql": &bintree{_01_init_databaseDownSql, map[string]*bintree{}},
	"01_init_database.up.sql": &bintree{_01_init_databaseUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

