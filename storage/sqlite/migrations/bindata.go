// Code generated by go-bindata. DO NOT EDIT.
// sources:
// 01_init_database.up.sql
// 02_init_database.down.sql
package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __01_init_databaseUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x90\xc1\x4a\xc4\x30\x10\x86\xef\x79\x8a\xff\xd8\x82\x6f\xe0\xa9\x96\xe9\x12\xd4\xae\xa4\x39\xec\x9e\x24\x6c\x46\x29\xb4\x09\x24\x1b\xc5\xb7\x97\x84\x6d\xed\xc9\xc2\xde\x92\x19\xf8\xf8\xbe\x69\x15\x35\x9a\xa0\x9b\xa7\x17\x82\xec\xd0\x1f\x35\xe8\x24\x07\x3d\xc0\x58\xeb\x1d\x2a\x01\x8c\x16\xb2\xd7\x74\x20\x85\x37\x25\x5f\x1b\x75\xc6\x33\x9d\xd1\x0c\xed\x83\x00\x9c\x99\x19\x9a\x4e\x5a\xd4\x8f\x42\xfc\x03\xbc\xa4\x10\xf9\x7d\x0f\x9b\x91\x29\x4c\x85\x98\xdf\x31\xcd\xb3\x09\x3f\xeb\xdf\xfa\x6f\x37\x79\x63\x2f\x3e\xb9\xeb\x02\xc8\x8b\x02\xfe\x63\xe6\x51\x77\x54\x24\x0f\x7d\xc6\x56\xb7\x75\x0d\x45\x1d\x29\xea\x5b\xba\x25\x56\xa3\xad\x8b\xfa\xbe\x7b\xe0\x89\x4d\xe4\x1d\xfb\x8f\x71\xe2\xf5\x28\x45\xd9\x5c\x79\xab\xb5\x24\x6c\x33\x3f\xcd\xcc\x5f\x1c\xe2\xe8\xdd\x3a\xbb\xa3\x68\x73\xe3\xa5\xeb\x37\x00\x00\xff\xff\xdc\xda\xe0\xf2\xe3\x01\x00\x00")

func _01_init_databaseUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__01_init_databaseUpSql,
		"01_init_database.up.sql",
	)
}

func _01_init_databaseUpSql() (*asset, error) {
	bytes, err := _01_init_databaseUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "01_init_database.up.sql", size: 483, mode: os.FileMode(420), modTime: time.Unix(1529255994, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __02_init_databaseDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\xf0\x74\x53\x70\x8d\xf0\x0c\x0e\x09\x56\x48\x4c\x49\xc9\xcf\xb3\xe6\xc2\x2a\x97\x5c\x5a\x54\x9c\x1a\x4f\x58\x45\x51\x6a\x4e\x6a\x62\x71\xaa\x35\x17\x20\x00\x00\xff\xff\x6f\xa7\xf0\x2e\x62\x00\x00\x00")

func _02_init_databaseDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__02_init_databaseDownSql,
		"02_init_database.down.sql",
	)
}

func _02_init_databaseDownSql() (*asset, error) {
	bytes, err := _02_init_databaseDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "02_init_database.down.sql", size: 98, mode: os.FileMode(420), modTime: time.Unix(1529261303, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"01_init_database.up.sql": _01_init_databaseUpSql,
	"02_init_database.down.sql": _02_init_databaseDownSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"01_init_database.up.sql": &bintree{_01_init_databaseUpSql, map[string]*bintree{}},
	"02_init_database.down.sql": &bintree{_02_init_databaseDownSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

